name: CMake

on:
  push:
    branches:
      - master

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac. You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: windows-latest

    env:
      PKGNAME: Olive-${GITHUB_SHA:8}-Windows-x86_64

    steps:
    - name: Set package name
      shell: bash
      run: echo "::set-env name=PKGNAME::$(echo Olive-${GITHUB_SHA::8}-Windows-x86_64)"

    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Enable Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1.3.0

    - name: Acquire Qt
      uses: jurplel/install-qt-action@v2.8.0
      with:
        version: 5.15.1

    - name: Acquire FFmpeg
      run: curl -fLOSs --retry 3 http://olivevideoeditor.org/deps/ffmpeg-win.7z && 7z x ffmpeg-win.7z

    - name: Acquire OpenColorIO
      run: curl -fLOSs --retry 3 http://olivevideoeditor.org/deps/ocio-win.7z && 7z x ocio-win.7z

    - name: Acquire OpenEXR
      run: curl -fLOSs --retry 3 http://olivevideoeditor.org/deps/openexr-win.7z && 7z x openexr-win.7z

    - name: Acquire OpenImageIO
      run: curl -fLOSs --retry 3 http://olivevideoeditor.org/deps/oiio-win.7z && 7z x oiio-win.7z

    - name: Acquire libpng
      run: curl -fLOSs --retry 3 http://olivevideoeditor.org/deps/libpng-win.7z && 7z x libpng-win.7z

    - name: Acquire libtiff
      run: curl -fLOSs --retry 3 http://olivevideoeditor.org/deps/libtiff-win.7z && 7z x libtiff-win.7z

    - name: Acquire turbojpeg
      run: curl -fLOSs --retry 3 http://olivevideoeditor.org/deps/turbojpeg-win.7z && 7z x turbojpeg-win.7z

    - name: Acquire zlib
      run: curl -fLOSs --retry 3 http://olivevideoeditor.org/deps/zlib-win.7z && 7z x zlib-win.7z

    - name: Acquire Boost
      run: curl -fLOSs --retry 3 http://olivevideoeditor.org/deps/boost-win.7z && 7z x boost-win.7z

    - name: Acquire Crashpad
      run: curl -fLOSs --retry 3 http://olivevideoeditor.org/deps/crashpad-win.7z && 7z x crashpad-win.7z

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: PATH=$GITHUB_WORKSPACE:$PATH cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -G "Ninja"

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build. You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE

    - name: Create Package
      working-directory: ${{runner.workspace}}/build
      shell: cmd
      run: mkdir olive-editor && copy app\olive-editor.exe olive-editor && copy app\olive-editor.pdb olive-editor && windeployqt olive-editor\olive-editor.exe && copy %GITHUB_WORKSPACE%\bin\*.dll olive-editor && copy %GITHUB_WORKSPACE%\out\Default\crashpad_handler.exe olive-editor

    - name: Deploy Installer
      working-directory: ${{runner.workspace}}/build
      shell: cmd
      run: copy %GITHUB_WORKSPACE%\app\packaging\windows\nsis\* . && copy %GITHUB_WORKSPACE%\LICENSE . && "C:/Program Files (x86)/NSIS/makensis.exe" -V4 -DX64 "-XOutFile %PKGNAME%.exe" olive.nsi

    - name: Deploy Portable
      working-directory: ${{runner.workspace}}/build
      shell: cmd
      run: type NUL > olive-editor\portable && 7z a %PKGNAME%.zip olive-editor

    - name: Export Crashpad Symbols and Upload To Server
      working-directory: ${{runner.workspace}}/build
      shell: cmd
      env:
        GH_AUTH_KEY: ${{secrets.GH_AUTH_KEY}}
      run: curl -fLSs --retry 3 https://github.com/google/breakpad/blob/master/src/tools/windows/binaries/dump_syms.exe?raw=true > dump_syms.exe && dump_syms app\olive-editor.pdb > olive-editor.sym && curl -X POST -F symfile=@olive-editor.sym -F key="%GH_AUTH_KEY%" https://olivevideoeditor.org/crashpad/symbols.php

    - name: Upload Installer to Nightly Page
      shell: bash
      working-directory: ${{runner.workspace}}/build
      env:
        GH_AUTH_KEY: ${{secrets.GH_AUTH_KEY}}
      run: curl -X POST -F file=@$PKGNAME.exe -F key="$GH_AUTH_KEY" -F hash="$GITHUB_SHA" -F time="$(git -C $GITHUB_WORKSPACE show -s --format=%ct)" -F comment="$(git -C $GITHUB_WORKSPACE show -s --format=%B)" https://olivevideoeditor.org/dl/push.php

    - name: Upload Portable to Nightly Page
      shell: bash
      working-directory: ${{runner.workspace}}/build
      env:
        GH_AUTH_KEY: ${{secrets.GH_AUTH_KEY}}
      run: curl -X POST -F file=@$PKGNAME.zip -F key="$GH_AUTH_KEY" -F hash="$GITHUB_SHA" -F time="$(git -C $GITHUB_WORKSPACE show -s --format=%ct)" -F comment="$(git -C $GITHUB_WORKSPACE show -s --format=%B)" https://olivevideoeditor.org/dl/push.php

    - name: Upload Installer Artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.PKGNAME}}.exe
        path: ${{runner.workspace}}/build/${{env.PKGNAME}}.exe

    - name: Upload Portable Artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.PKGNAME}}.zip
        path: ${{runner.workspace}}/build/${{env.PKGNAME}}.zip
